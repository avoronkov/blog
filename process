#!/usr/bin/perl -w
use strict;
use feature qw/say/;

use Lingua::Translit;

sub transliterate {
	my ($str) = @_;
	my $tr = new Lingua::Translit('GOST 7.79 RUS');
	return map { my $x = $tr->translit($_); $x =~ s/[`']//; $x } @_;
}

sub preview_file {
	my ($file, $out) = @_;
	open my $in, "<", $file or die "$!";
	print $out "#";
	while (my $line = <$in>) {
		chomp $line;
		say $out "$line";
		unless ($line eq "" || $line =~ /^[#`_]/) {
			my ($link) = $file =~ m{^[^/]+(/.*)\.md$};
			say $out "[Далее]($link/)\n";
			last;
		}
	}
	close $in or warn $!;
}

my $site_name = "Art. Technology. Life";
my $subtitle = "![Cubes](/image/00-white-cube.jpg)\n\n*Блог Александра Воронкова*";

my @files = `ls docs/20*/*.md | sort --reverse`;
chomp @files;

open my $index, ">", "docs/index.md" or die $!;
say $index "# $site_name\n";
say $index $subtitle;
say $index "## Заметки";

my $max = $#files > 9 ? 9 : $#files;

for my $file(@files[0..$max]) {
	preview_file($file, $index);
}

close $index;


open my $yml, ">", "mkdocs.yml" or die $!;
say $yml "site_name: $site_name";
say $yml "pages:";
say $yml "    - Home: index.md";
say $yml "    - Blog:";

my $n = 1;
for my $file(reverse @files) {
	chomp(my $title = `head -n 1 $file`);
	($title) = $title =~ /^## (.*)$/;
	my ($path) = $file =~ m{^docs/(.+)$};
	say $yml "        - '$title ($n)': $path";
	$n++;
}

close $yml;

sub process_misc {
	my ($name) = @_;
	open my $r, "<", "docs/$name.md" or die "$!";
	chomp(my @lines = <$r>);
	close $r or warn "$!";

	my ($title) = $lines[0] =~ m/^# (.*)$/;

	open my $y, ">>", "mkdocs.yml" or die "$!";
	say $y "        - '$title':";
	say $y "            - '$title': $name.md";

	open my $f, ">", "docs/$name.md" or die "$!";
	say $f "# $title";

	`echo "- [$title](/$name/)" >> docs/index.md`;

	my @files = sort(glob("docs/$name/*.md"));
	for my $file(@files) {
		open my $x, "<", $file or die "$file : $!";
		my @l = <$x>;
		close $x or warn "$!";
		my ($t) = $l[0] =~ m/#\s*(.*)\s*$/;
		my ($link) = $file =~ m{^.*/([^/]*)\.md$};
		say $f "- [$t](/$name/$link/)\n";

		say $y "            - '$t': $name/$link.md";
	}
	close $f or warn "$!";
	close $y or warn "$!";
}

sub process_tag {
	my ($tag, $title) = @_;
	my @files_with_tag = qx/grep -Rn '`#' @files | grep '`#$tag\\b' | cut -d: -f 1/;
	chomp(@files_with_tag);

	my ($filename) =  transliterate($tag);
	my $tag_file = "docs/by_tag/" . $filename . ".md";
	open my $f, ">", $tag_file or die "$! : $tag_file";
	say $f "# $title";
	say $f "`#$tag`\n";
	for my $a(@files_with_tag) {
		preview_file($a, $f);
	}
	close $f;

	my ($short_path) = $tag_file =~ m{^docs/(.*)$};
	`echo "        - '#$tag': $short_path" >> mkdocs.yml`;
}

`echo '    - Extras:' >> mkdocs.yml`;
`echo '## Разное' >> docs/index.md`;
process_misc "codefest2018";

`echo '    - Tags:' >> mkdocs.yml`;
process_tag 'книгиокоторыхяупоминалнанабросках', 'Книги, о которых я упоминал на набросках';
